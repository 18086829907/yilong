# 问题：初中知识点，例如y=kx+b，y=ax^2+bx+c
# 以y=kx+b为例子，请计算一条线上的过的点，即给x值，计算出y的值
#
# 第1
'''
k = 1
b = 2
x = 0
y = k*x+b
'''
# 缺点：当k和b固定时，要求不同的x所对应的y值时，需要多次写x=1,y=k*x+b

# 第2 函数
'''
def f(k,b,x):
    print(k*x+b)
f(1,2,0)
f(1,2,1)
f(1,2,3)
'''
# 缺点：如果需要多次计算y值，需要多次传递kb的参数，麻烦

# 第3 全局变量
'''
def f(x):
    print(k*x+b)
k = 1
b = 2
f(0)
f(1)

k = 11
b = 22
f(0)
f(1)
'''
# 缺点：如果需要计算多条直线的y值，每次还需要另外定义k和b

# 第4 关键字参
'''
def f(x, k=1, b=2):
    print(k*x+b)
f(0)
f(1)
f(1,k=11,b=22)
f(0,k=11,b=22)
'''
# 优点：比全局变量的方式好在：k,b是函数的一部分，而不是全局变量，因为全局变量可以任意被其他函数所修改
# 缺点：如果需要计算多条直线的y值，每次还需要另外定义k和b
'''
class F:
    def __init__(self, k, b):
        self.k = k
        self.b = b

    def fp(self, x):
        print(self.k*x+self.b)

f = F(1, 2)
f.fp(0)
f.fp(1)
'''
# 升级版
'''
class F:
    def __init__(self, k, b):
        self.k = k
        self.b = b

    def __call__(self, x):
        print(self.k*x+self.b)

f = F(1, 2)  #直接调用实力对象
f(0)
f(1)
'''
# 缺点：为了计算多条线上的y值，所以需要保存多个k，b的值，因此用了很多实力对象，浪费资源

# 第6 闭包：函数套函数，内部函数往往又要使用外部函数定义的变量，而且外函数要return 内函数的函数名，我们将内部函数以及外部函数定义的变量，这个整体所占空间就叫闭包
'''
def f1(k,b):
    def f2(x):
        print(k*x+b)
    return f2
f = f1(1,2)
f(0)
f(1)
'''
# 闭包可以理解为一个简单的类，
def f1(k,b):
    k = k  # 外部函数的变量，可以理解为在定义实例变量
    b = b
    def f2(x):  # 内部函数可以理解为实例函数
        print(k*x+b)
    return f2

f = f1(1,2)  # 接收内部函数的过程，可以理解为在实例化一个对象
f(0)  # 调用内部函数，可以理解为调用__call__函数
f(1)


# 分别介绍一下函数、匿名函数、闭包、类：
#   函数能封装代码，通过函数名即可调用
#   匿名函数也是函数，可以封装一部分代码，它比def方式定义函数要简单，比如要排列一个列表的顺序，定义一个很简单的匿名函数，把值返回给你，匿名函数当做实参，相当方便
#   比函数要高端，不仅可以给你代码，还可以给你代码所有到的数据
#   实例对象的引用，给到你后，你拿到的是一个对象，这个对象里面的任何方法都可以调用