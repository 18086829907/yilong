# Linux介绍、命令
#   操作系统（科普章节）
#   操作系统的发展史（科普章节）
#   文件和目录
#   Ubuntu 图形界面入门
#   Linux 命令的基本使用
#   Linux 终端命令格式
#   Linux 常用命令（一）
#   Linux 常用命令（二）

# 会用，多练
# ls cd pwd rm cat cp mv mkdir touch tree more top htop ps kill
# clear history ifconfig ping ssh scp tar chmod shutdown reboot
# find grep ln sudo man which who whoami >重定向输出 < |管道

# Linux安装软件、python开发环境
#   软件安装与卸载
#   常用服务器fth、ssh
#   编辑器vim
#   pycharm的集成vim
#   编辑器sublime、终端运行python

# 网络-udp
#   网络通讯概述
#   ip地址（重点）
#   Linux命令（ping、ifconfig等）
#   端口（重点）
#   socket简介
#   udp网络程序-发送、接收数据（重点）
#   python3编码转换
#   udp绑定端口问题（重点）
#   网络通信过程（简单版）
#   案例：udp聊天器

# 网络-tcp
#   tcp简介
#       发送数据后，接收数据方会悄悄给发送数据方回复已经收到数据，如果接收方在一定时间内还未收到接收方的数据接收确认，则会再次发送同样的数据，从而保证数据不丢失
#   tcp网络程序-客服端（重点）
#   tcp网络程序-服务器（重点）
#   tcp注意点（重点）
#   案例：文件下载器
#   tcp的3次握手（重点）
#       连接双方做资源准备
#   tcp的4次挥手（重点）
#       释放连接资源
#   tcp长连接和短连接（重点）
#       一个网页会有很多css、js需要从服务器中获取，短连接是获取一个使用一套新的资源，而长连接是用一个套资源将所有需要的html、css、js获取完后才释放这套资源
#   wireshark的使用（要会用）
#       抓包工具
#   tcp/ip简介

# 多任务-线程
#   多任务的介绍
#   多任务的概念
#   线程（重点）
#   线程-注意点
#   多线程-共享全局变量（重点）
#   多线程-共享全局变量-问题
#   同步
#   互斥锁（重点）
#       由于多线程是共享全局变量，因此会出现资源竞争的问题，互斥锁保证让同一时刻只有一个线程对变量进行修改，从而保证数据的准确
#   死锁
#   GIL（重点）
#       保证同一时刻只有一个线程运行
#   案例：多任务版udp聊天器

# 多任务-进程
#   进程以及状态
#   进程的创建-multiprocessing
#   进程、线程对比
#   进程间通信-Queue
#   进程的创建-进程池Pool
#   案例：文件夹copy器

# 多任务-协程
#   迭代器
#   生成器
#   协程-yield
#   协程-greenlet
#   协程-gevent
#   进程、线程、协程区别（重点）
#       多进程是真的多任务
#       线程如果用的是c写的python解释器则会有GIL，因此python中的多线程其实是假的多任务
#       协程是当程序中有阻塞或等待时，利用这个时间去调用了其他函数，从而提高的效率
#   案例：并发下载器

# 多任务最优方案-多进程中多协程

# 正则表达式
#   正则表达式概述
#   re模块操作
#   匹配单个字符
#   匹配多个字符
#   匹配开头结尾
#   匹配分组
#   re模块的高级用法
#   贪婪和非贪婪
#       .*条件满足的情况先，取值越多越好
#       .*?条件满足的情况先，取值越少越好
#   r的作用

# http协议、web服务器-并发服务器1
#   http协议（重点）
#       request
#           header
#           body
#       response
#           header
#               status_code
#                   200-299：成功
#                   300-399：重定向  # 浏览器输入360buy.com,最后出现的是www.jd.com，这就是重定向。原理：首先给360buy服务器发送get请求，360buy服务器会给浏览器返回状态码为302并且在response中有一个location：'www.jd.com'，当浏览器收到302时，会自动去访问location指向的url
#                   400-499：未找到资源
#                   500-599：服务器挂掉
#           body
#   浏览器与服务器之间的交互（重点）
#   访问百度的过程，（重点）
#       www.baidu.com
#
#   web静态服务器-1-显示固定的页面
#   web静态服务器-2-显示需要的页面
#   web静态服务器-3-多进程
#   web静态服务器-4-多线程

# web服务器-并发服务器2
#   web静态服务器-5-非阻塞模式
#   web静态服务器-6-epoll
#   web静态服务器-7-gevent
#   知识扩展-C10K问题

# 网络通讯
#   网络通讯过程
#   NAT

# python提高1
#   GIL（重点）
#   深拷贝、浅拷贝（重点）
#   私有化
#   import导入模块
#   再议 封装、继承、多肽（重点）

# python提高2
#   多继承以及mro顺序-supper调用父类的规则（重点）
#   再议静态方法、类方法
#   property属性-讲解
#   property属性-应用
#   魔法属性
#   面向对象设计
#   with与'上下文管理器'（重点）

# MySQL-基本使用
#   数据库简介
#       数据存储
#       数据库
#       RDBMS
#       RDBMS和数据库的关系
#       SQL
#       MySQL
#   MySQL安装
#   数据完整性
#   Navicat图形界面工具操作
#       数据库操作
#       数据表操作
#       数据操作
#   命令行脚本（重点）
#       数据库的操作
#       数据表的操作
#       数据的增删改查
#       数据备份&恢复
#   数据库的设计

# MySQL-查询（重点）
#   MySQL查询
#   条件
#   排序
#   聚合函数
#   分组
#   分页
#   连接查询
#   自关联
#   子查询
#   总结

# MySQL与Python的交互
#   数据准备
#   SQL演练
#   数据库设计
#   Python操作MySQL步骤
#   增删改查
#   参数化

# MySQL高级（重点）
#   视图
#   事务ACID
#       提交
#       回滚
#   索引
#   账户管理
#       授予权限
#       账户操作
#   MySQL主从

# WSGI、mini_web框架（重点）
#   WSGI协议
#       规定服务器与web框架之间怎么通讯
#   服务器动态资源请求
#   应用程序示例
#   web动态服务器-基本实现
#   mini-web框架-1-文件结构
#   mini-web框架-2-显示页面
#   mini-web框架-3-替换模板

# 闭包、装饰器（重点）（重点）（重点）
#   闭包
#       函数嵌套函数，外层函数返回内层函数的引用，并且内层函数会用到外层函数的局部变量
#   装饰器
#       在不修改原函数代码的情况下，在原函数执行前加功能，这就是装饰器的作用，装饰器是一种闭包程序

# mini-web框架 添加路由、mysql功能
#   mini-web框架-4-路由
#   静态、动态、伪静态
#   mini-web框架-5-实现伪静态url
#   准备股票数据
#   mini-web框架-6-从mysql中查询数据
#   mini-web框架-7-组装数据为html格式

# mini-web框架 添加log日志、路由支持正则
#   mini-web框架-8-路由支持正则
#   mini-web框架-9-mysql增
#   mini-web框架-10-mysql删
#   mini-web框架-11-mysql改
#   mini-web框架-12-url编码
#   logging日志模块

# 元类、实现ORM（需要提高时，可以看看）
#   元类
#   元类实现ORM